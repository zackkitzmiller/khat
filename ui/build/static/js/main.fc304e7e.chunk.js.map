{"version":3,"sources":["api/index.js","components/Message/Message.jsx","components/ChatHistory/ChatHistory.jsx","components/ChatInput/ChatInput.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["socket","WebSocket","Message","props","temp","JSON","parse","message","state","className","this","body","Component","ChatHistory","messages","chatHistory","map","msg","index","key","data","ChatInput","onKeyDown","send","Header","App","cb","console","log","setState","prevState","opopen","onmessage","onclose","event","onerror","error","keyCode","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"mTAAIA,EAAS,IAAIC,UAAU,0BCiBZC,G,8DAbX,WAAYC,GAAQ,IAAD,sBACf,cAAMA,GACN,IAAIC,EAAOC,KAAKC,MAAM,EAAKH,MAAMI,SAFlB,OAGf,EAAKC,MAAQ,CACTD,QAASH,GAJE,E,qDASf,OAAO,yBAAKK,UAAU,WAAWC,KAAKF,MAAMD,QAAQI,U,GAVtCC,cCcPC,E,uKAXP,IAAMC,EAAWJ,KAAKP,MAAMY,YAAYC,KAAI,SAACC,EAAKC,GAAN,OAAgB,kBAAC,EAAD,CAASC,IAAKD,EAAOX,QAASU,EAAIG,UAE9F,OACI,yBAAKX,UAAU,eACX,4CACCK,O,GAPSF,aCSXS,G,6KARP,OACI,yBAAKZ,UAAU,aACX,2BAAOa,UAAWZ,KAAKP,MAAMoB,Y,GAJrBX,cCMTY,G,MANA,kBACX,yBAAKf,UAAU,UACX,uCCuCOgB,E,kDAnCb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXO,YAAa,IAHE,E,gEAOE,ILdTW,EKcQ,OLdRA,EKeF,SAACT,GACPU,QAAQC,IAAI,eACZ,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1Bf,YAAY,GAAD,mBAAM,EAAKP,MAAMO,aAAjB,CAA8BE,QAE3CU,QAAQC,IAAI,EAAKpB,QLnBnBmB,QAAQC,IAAI,yBAEZ5B,EAAO+B,OAAS,WACZJ,QAAQC,IAAI,4BAGhB5B,EAAOgC,UAAY,SAAAf,GACfU,QAAQC,IAAIX,GACZS,EAAGT,IAGPjB,EAAOiC,QAAU,SAAAC,GACbP,QAAQC,IAAI,6BAA8BM,IAG9ClC,EAAOmC,QAAU,SAAAC,GACbT,QAAQC,IAAI,iBAAkBQ,M,2BKO/BF,GLHO,IAAAjB,EKIY,KAAlBiB,EAAMG,ULJApB,EKKAiB,EAAMI,OAAOC,MLJvBZ,QAAQC,IAAI,gBAAiBX,GAC7BjB,EAAOuB,KAAKN,GKIViB,EAAMI,OAAOC,MAAQ,M,+BAKvB,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAaM,YAAaL,KAAKF,MAAMO,cACrC,kBAAC,EAAD,CAAWQ,KAAMb,KAAKa,Y,GA/BZX,aCKE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLT,QAAQS,MAAMA,EAAM7B,c","file":"static/js/main.fc304e7e.chunk.js","sourcesContent":["var socket = new WebSocket(\"ws://localhost:8080/ws\")\n\nlet connect = cb => {\n    console.log(\"Attempting Connection\")\n\n    socket.opopen = () => {\n        console.log(\"Successfully Connection\")\n    }\n\n    socket.onmessage = msg => {\n        console.log(msg)\n        cb(msg)\n    }\n\n    socket.onclose = event => {\n        console.log(\"Socket Closed Connection: \", event)\n    }\n\n    socket.onerror = error => {\n        console.log(\"Socket Error: \", error)\n    }\n}\n\nlet sendMsg = msg => {\n    console.log(\"sending msg: \", msg)\n    socket.send(msg)\n}\n\nexport { connect, sendMsg }\n","import React, { Component } from \"react\"\nimport \"./Message.scss\"\n\nclass Message extends Component {\n    constructor(props) {\n        super(props)\n        let temp = JSON.parse(this.props.message)\n        this.state = {\n            message: temp\n        }\n    }\n\n    render() {\n        return <div className=\"Message\">{this.state.message.body}</div>\n    }\n}\n\nexport default Message\n","import React, { Component } from \"react\"\nimport \"./ChatHistory.scss\"\nimport Message from \"../Message/Message\"\n\nclass ChatHistory extends Component {\n    render() {\n        const messages = this.props.chatHistory.map((msg, index) => <Message key={index} message={msg.data} />)\n\n        return (\n            <div className=\"ChatHistory\">\n                <h2>Chat History</h2>\n                {messages}\n            </div>\n        )\n    }\n}\n\nexport default ChatHistory\n","import React, { Component } from \"react\"\nimport \"./ChatInput.scss\"\n\nclass ChatInput extends Component {\n    render() {\n        return (\n            <div className=\"ChatInput\">\n                <input onKeyDown={this.props.send} />\n            </div>\n        )\n    }\n}\n\nexport default ChatInput\n","import React from \"react\"\nimport \"./Header.scss\"\n\nconst Header = () => (\n    <div className=\"header\">\n        <h2>Khat</h2>\n    </div>\n)\n\nexport default Header\n","import React, { Component } from 'react';\n// import './App.css';\nimport { connect, sendMsg } from './api'\nimport ChatHistory from './components/ChatHistory/ChatHistory'\nimport ChatInput from './components/ChatInput/ChatInput'\nimport Header from './components/Header/Header'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      chatHistory: []\n    }\n  }\n\n  componentDidMount() {\n    connect((msg) => {\n      console.log(\"New Message\")\n      this.setState(prevState => ({\n        chatHistory: [...this.state.chatHistory, msg]\n      }))\n      console.log(this.state);\n    });\n  }\n\n  send(event) {\n    if (event.keyCode === 13) {\n      sendMsg(event.target.value)\n      event.target.value = \"\"\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <ChatHistory chatHistory={this.state.chatHistory} />\n        <ChatInput send={this.send} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}